//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Substrate.AjunaSolo.NET.NetApiExt.Generated.Storage
{
    
    
    /// <summary>
    /// >> NftStakingStorage
    /// </summary>
    public sealed class NftStakingStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> NftStakingStorage Constructor
        /// </summary>
        public NftStakingStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("NftStaking", "Creator"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("NftStaking", "GlobalConfigs"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_ajuna_nft_staking.pallet.GlobalConfig)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("NftStaking", "ContractCollectionId"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("NftStaking", "Contracts"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, typeof(Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.primitive_types.H256), typeof(Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_ajuna_nft_staking.contracts.Contract)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("NftStaking", "ContractsMetadata"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, typeof(Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.primitive_types.H256), typeof(Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT37)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("NftStaking", "ContractsStats"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, typeof(Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32), typeof(Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_ajuna_nft_staking.contracts.ContractStats)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("NftStaking", "ContractAccepted"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, typeof(Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.primitive_types.H256), typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("NftStaking", "ContractStakedItems"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, typeof(Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.primitive_types.H256), typeof(Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT38)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("NftStaking", "ContractIds"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, typeof(Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32), typeof(Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT39)));
        }
        
        /// <summary>
        /// >> CreatorParams
        /// </summary>
        public static string CreatorParams()
        {
            return RequestGenerator.GetStorage("NftStaking", "Creator", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> CreatorDefault
        /// Default value as hex string
        /// </summary>
        public static string CreatorDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Creator
        /// </summary>
        public async Task<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32> Creator(string blockhash, CancellationToken token)
        {
            string parameters = NftStakingStorage.CreatorParams();
            var result = await _client.GetStorageAsync<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> GlobalConfigsParams
        /// </summary>
        public static string GlobalConfigsParams()
        {
            return RequestGenerator.GetStorage("NftStaking", "GlobalConfigs", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> GlobalConfigsDefault
        /// Default value as hex string
        /// </summary>
        public static string GlobalConfigsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> GlobalConfigs
        /// </summary>
        public async Task<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_ajuna_nft_staking.pallet.GlobalConfig> GlobalConfigs(string blockhash, CancellationToken token)
        {
            string parameters = NftStakingStorage.GlobalConfigsParams();
            var result = await _client.GetStorageAsync<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_ajuna_nft_staking.pallet.GlobalConfig>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> ContractCollectionIdParams
        /// </summary>
        public static string ContractCollectionIdParams()
        {
            return RequestGenerator.GetStorage("NftStaking", "ContractCollectionId", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> ContractCollectionIdDefault
        /// Default value as hex string
        /// </summary>
        public static string ContractCollectionIdDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> ContractCollectionId
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> ContractCollectionId(string blockhash, CancellationToken token)
        {
            string parameters = NftStakingStorage.ContractCollectionIdParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> ContractsParams
        /// </summary>
        public static string ContractsParams(Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.primitive_types.H256 key)
        {
            return RequestGenerator.GetStorage("NftStaking", "Contracts", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> ContractsDefault
        /// Default value as hex string
        /// </summary>
        public static string ContractsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Contracts
        /// </summary>
        public async Task<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_ajuna_nft_staking.contracts.Contract> Contracts(Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.primitive_types.H256 key, string blockhash, CancellationToken token)
        {
            string parameters = NftStakingStorage.ContractsParams(key);
            var result = await _client.GetStorageAsync<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_ajuna_nft_staking.contracts.Contract>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> ContractsMetadataParams
        /// </summary>
        public static string ContractsMetadataParams(Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.primitive_types.H256 key)
        {
            return RequestGenerator.GetStorage("NftStaking", "ContractsMetadata", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> ContractsMetadataDefault
        /// Default value as hex string
        /// </summary>
        public static string ContractsMetadataDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> ContractsMetadata
        /// </summary>
        public async Task<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT37> ContractsMetadata(Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.primitive_types.H256 key, string blockhash, CancellationToken token)
        {
            string parameters = NftStakingStorage.ContractsMetadataParams(key);
            var result = await _client.GetStorageAsync<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT37>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> ContractsStatsParams
        /// </summary>
        public static string ContractsStatsParams(Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key)
        {
            return RequestGenerator.GetStorage("NftStaking", "ContractsStats", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> ContractsStatsDefault
        /// Default value as hex string
        /// </summary>
        public static string ContractsStatsDefault()
        {
            return "0x0000000000000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> ContractsStats
        /// </summary>
        public async Task<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_ajuna_nft_staking.contracts.ContractStats> ContractsStats(Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key, string blockhash, CancellationToken token)
        {
            string parameters = NftStakingStorage.ContractsStatsParams(key);
            var result = await _client.GetStorageAsync<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_ajuna_nft_staking.contracts.ContractStats>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> ContractAcceptedParams
        /// </summary>
        public static string ContractAcceptedParams(Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.primitive_types.H256 key)
        {
            return RequestGenerator.GetStorage("NftStaking", "ContractAccepted", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> ContractAcceptedDefault
        /// Default value as hex string
        /// </summary>
        public static string ContractAcceptedDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> ContractAccepted
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> ContractAccepted(Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.primitive_types.H256 key, string blockhash, CancellationToken token)
        {
            string parameters = NftStakingStorage.ContractAcceptedParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> ContractStakedItemsParams
        /// </summary>
        public static string ContractStakedItemsParams(Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.primitive_types.H256 key)
        {
            return RequestGenerator.GetStorage("NftStaking", "ContractStakedItems", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> ContractStakedItemsDefault
        /// Default value as hex string
        /// </summary>
        public static string ContractStakedItemsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> ContractStakedItems
        /// </summary>
        public async Task<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT38> ContractStakedItems(Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.primitive_types.H256 key, string blockhash, CancellationToken token)
        {
            string parameters = NftStakingStorage.ContractStakedItemsParams(key);
            var result = await _client.GetStorageAsync<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT38>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> ContractIdsParams
        /// </summary>
        public static string ContractIdsParams(Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key)
        {
            return RequestGenerator.GetStorage("NftStaking", "ContractIds", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> ContractIdsDefault
        /// Default value as hex string
        /// </summary>
        public static string ContractIdsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> ContractIds
        /// </summary>
        public async Task<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT39> ContractIds(Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key, string blockhash, CancellationToken token)
        {
            string parameters = NftStakingStorage.ContractIdsParams(key);
            var result = await _client.GetStorageAsync<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT39>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> NftStakingCalls
    /// </summary>
    public sealed class NftStakingCalls
    {
        
        /// <summary>
        /// >> set_creator
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetCreator(Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 creator)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(creator.Encode());
            return new Method(26, "NftStaking", 0, "set_creator", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_contract_collection_id
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetContractCollectionId(Substrate.NetApi.Model.Types.Primitive.U32 collection_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(collection_id.Encode());
            return new Method(26, "NftStaking", 1, "set_contract_collection_id", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_global_config
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetGlobalConfig(Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_ajuna_nft_staking.pallet.GlobalConfig new_config)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(new_config.Encode());
            return new Method(26, "NftStaking", 2, "set_global_config", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> create
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Create(Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.primitive_types.H256 contract_id, Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_ajuna_nft_staking.contracts.Contract contract, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.Str> metadata, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.Str, Substrate.NetApi.Model.Types.Primitive.Str>>> contract_attrs)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(contract_id.Encode());
            byteArray.AddRange(contract.Encode());
            byteArray.AddRange(metadata.Encode());
            byteArray.AddRange(contract_attrs.Encode());
            return new Method(26, "NftStaking", 3, "create", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> remove
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Remove(Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.primitive_types.H256 contract_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(contract_id.Encode());
            return new Method(26, "NftStaking", 4, "remove", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> accept
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Accept(Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.primitive_types.H256 contract_id, Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_ajuna_nft_staking.contracts.NftId> stakes, Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_ajuna_nft_staking.contracts.NftId> fees)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(contract_id.Encode());
            byteArray.AddRange(stakes.Encode());
            byteArray.AddRange(fees.Encode());
            return new Method(26, "NftStaking", 5, "accept", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> cancel
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Cancel(Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.primitive_types.H256 contract_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(contract_id.Encode());
            return new Method(26, "NftStaking", 6, "cancel", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> claim
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Claim(Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.primitive_types.H256 contract_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(contract_id.Encode());
            return new Method(26, "NftStaking", 7, "claim", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> snipe
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Snipe(Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.primitive_types.H256 contract_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(contract_id.Encode());
            return new Method(26, "NftStaking", 8, "snipe", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> NftStakingConstants
    /// </summary>
    public sealed class NftStakingConstants
    {
        
        /// <summary>
        /// >> PalletId
        ///  The NFT-staking's pallet id, used for deriving its sovereign account ID.
        /// </summary>
        public Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.frame_support.PalletId PalletId()
        {
            var result = new Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.frame_support.PalletId();
            result.Create("0x616A2F6E66747374");
            return result;
        }
        
        /// <summary>
        /// >> MaxContracts
        ///  The maximum number of contracts an account can have.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxContracts()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0xE8030000");
            return result;
        }
        
        /// <summary>
        /// >> MaxStakingClauses
        ///  The maximum number of staking clauses a contract can have.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxStakingClauses()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x14000000");
            return result;
        }
        
        /// <summary>
        /// >> MaxFeeClauses
        ///  The maximum number of fee clauses a contract can have.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxFeeClauses()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x14000000");
            return result;
        }
        
        /// <summary>
        /// >> MaxMetadataLength
        ///  The maximum number of bytes used for a contract's metadata.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxMetadataLength()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x64000000");
            return result;
        }
        
        /// <summary>
        /// >> KeyLimit
        ///  The maximum length of an attribute key.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 KeyLimit()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x20000000");
            return result;
        }
        
        /// <summary>
        /// >> ValueLimit
        ///  The maximum length of an attribute value.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 ValueLimit()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x40000000");
            return result;
        }
    }
    
    /// <summary>
    /// >> NftStakingErrors
    /// </summary>
    public enum NftStakingErrors
    {
        
        /// <summary>
        /// >> UnknownCreator
        /// The given creator doesn't exist.
        /// </summary>
        UnknownCreator,
        
        /// <summary>
        /// >> UnknownCollection
        /// The given collection doesn't exist.
        /// </summary>
        UnknownCollection,
        
        /// <summary>
        /// >> UnknownContractCollection
        /// The given contract collection doesn't exist.
        /// </summary>
        UnknownContractCollection,
        
        /// <summary>
        /// >> UnknownItem
        /// The given item doesn't exist.
        /// </summary>
        UnknownItem,
        
        /// <summary>
        /// >> UnknownContract
        /// The given contract doesn't exist.
        /// </summary>
        UnknownContract,
        
        /// <summary>
        /// >> UnknownActivation
        /// The given contract's activation is unknown.
        /// </summary>
        UnknownActivation,
        
        /// <summary>
        /// >> Ownership
        /// The given collection or item belongs to someone else.
        /// </summary>
        Ownership,
        
        /// <summary>
        /// >> ContractOwnership
        /// The given contract belongs to someone else.
        /// </summary>
        ContractOwnership,
        
        /// <summary>
        /// >> PalletLocked
        /// The pallet is currently locked and cannot be interacted with.
        /// </summary>
        PalletLocked,
        
        /// <summary>
        /// >> IncorrectActivation
        /// The given contract's activation block number is set in the past.
        /// </summary>
        IncorrectActivation,
        
        /// <summary>
        /// >> ZeroActiveDuration
        /// The given contract's active duration is zero. This results in immediate deactivation of
        /// newly created contracts.
        /// </summary>
        ZeroActiveDuration,
        
        /// <summary>
        /// >> ZeroClaimDuration
        /// The given contract's claim duration is zero. This results in immediate expiry of
        /// fulfilled contracts,
        /// </summary>
        ZeroClaimDuration,
        
        /// <summary>
        /// >> UnfulfilledFeeClause
        /// The given contract's fee clause is unfulfilled.
        /// </summary>
        UnfulfilledFeeClause,
        
        /// <summary>
        /// >> UnfulfilledStakingClause
        /// The given contract's staking clause is unfulfilled.
        /// </summary>
        UnfulfilledStakingClause,
        
        /// <summary>
        /// >> Inactive
        /// The contract is inactive hence cannot be accepted.
        /// </summary>
        Inactive,
        
        /// <summary>
        /// >> Staking
        /// The contract is staking hence cannot be claimed or sniped.
        /// </summary>
        Staking,
        
        /// <summary>
        /// >> Claimable
        /// The contract is claimable, so it cannot be cancelled or sniped.
        /// </summary>
        Claimable,
        
        /// <summary>
        /// >> Available
        /// The contract is available, or not yet accepted.
        /// </summary>
        Available,
        
        /// <summary>
        /// >> MaxContracts
        /// The number of the given account's contracts exceeds maximum allowed.
        /// </summary>
        MaxContracts,
        
        /// <summary>
        /// >> MaxStakingClauses
        /// The number of the given contract's staking clauses exceeds maximum allowed.
        /// </summary>
        MaxStakingClauses,
        
        /// <summary>
        /// >> MaxFeeClauses
        /// The number of the given contract's fee clauses exceeds maximum allowed.
        /// </summary>
        MaxFeeClauses,
        
        /// <summary>
        /// >> InvalidNFTStakeAmount
        /// The number of staked NFTs doesn't match the contract specs.
        /// </summary>
        InvalidNFTStakeAmount,
        
        /// <summary>
        /// >> InvalidNFTFeeAmount
        /// The number of fee NFTs doesn't match the contract specs.
        /// </summary>
        InvalidNFTFeeAmount,
        
        /// <summary>
        /// >> MetadataTooLong
        /// Metadata for the contract is too long.
        /// </summary>
        MetadataTooLong,
        
        /// <summary>
        /// >> AttributeKeyTooLong
        /// NFT attribute key bytes longer than limit.
        /// </summary>
        AttributeKeyTooLong,
        
        /// <summary>
        /// >> AttributeValueTooLong
        /// NFT attribute value bytes longer than limit.
        /// </summary>
        AttributeValueTooLong,
        
        /// <summary>
        /// >> NotContractHolder
        /// The given account does not hold any contracts.
        /// </summary>
        NotContractHolder,
        
        /// <summary>
        /// >> NotSniper
        /// The given account does not meet the criteria to be a sniper.
        /// </summary>
        NotSniper,
        
        /// <summary>
        /// >> CannotSnipeOwnContract
        /// The given account attempts to snipe its own contract.
        /// </summary>
        CannotSnipeOwnContract,
        
        /// <summary>
        /// >> CannotClaimUnknownContract
        /// Cannot claim contract with unknown owner, only sniping is possible.
        /// </summary>
        CannotClaimUnknownContract,
    }
}
